# -*- coding: utf-8 -*-
"""Lineear regeression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDMTRsfnJC7FlsjoYf7ebmbmtzr5JGL7
"""

!pip install -q sklearn



# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib
import tensorflow.compat.v2.feature_column as fc # linear regression
import tensorflow as tf

# load data

train_data = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv') # training data
eval_data = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv') # traing data

print(train_data.head())
print(eval_data.head())

train_data.describe()

train_data.shape

train_data.age.hist(bins=50)

train_data['sex'].value_counts().plot(kind='barh')

train_data['class'].value_counts().plot(kind='barh')

train_y = train_data.pop('survived')
eval_y = eval_data.pop('survived')

discont_data = ['sex','n_siblings_spouses','parch','class','deck','embark_town','alone']
cont_data = ['age','fare']

feature_columns = []

for feature_name in discont_data:
  vocabulary = train_data[feature_name].unique()
  feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocabulary))

for feature_name in cont_data:
  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))

print(feature_columns)

def make_input_fnc(data_input, data_output, num_epochs=10, shuffle=True, batch_size=32):
  def input_func():
    tf_dataset = tf.data.Dataset.from_tensor_slices((dict(data_input),data_output))
    if shuffle:
      tf_dataset = tf_dataset.shuffle(100)
    tf_dataset = tf_dataset.batch(batch_size).repeat(num_epochs)
    return tf_dataset
  return input_func

train_input_fnc = make_input_fnc(train_data,train_y)
eval_input_fnc = make_input_fnc(eval_data, eval_y, num_epochs=1, shuffle=False)

linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)

linear_est.train(train_input_fnc)

result = linear_est.evaluate(eval_input_fnc)

print('Accuracy =', result['accuracy'])
print('Prediction =', result['prediction/mean'])
print('Precision =', result['precision'])

result= list(linear_est.predict(eval_input_fnc))
print(result[0]['probabilities'][1])

x= train_data.loc[4]

x

x

